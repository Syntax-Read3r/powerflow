name: PowerFlow Release

on:
  push:
    tags:
      - 'v*'  # ‚úÖ FIX: Triggers on ANY version tag like v1.0.1, v1.0.2, v2.0.0, etc.

env:
  REPO_NAME: powerflow
  PROFILE_FILE: Microsoft.PowerShell_profile.ps1

jobs:
  validate:
    name: üîç Validate Release
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üè∑Ô∏è Get Version from Tag
        id: get_version
        run: |
          $tagName = "${{ github.ref_name }}"
          $version = $tagName -replace '^v', ''
          Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Output "tag_name=$tagName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "üè∑Ô∏è Tag: $tagName"
          Write-Host "üì¶ Version: $version"
        shell: pwsh
        
      - name: ‚úÖ Validate Profile File Exists
        run: |
          if (-not (Test-Path "${{ env.PROFILE_FILE }}")) {
            Write-Error "‚ùå Profile file not found: ${{ env.PROFILE_FILE }}"
            exit 1
          }
          Write-Host "‚úÖ Profile file found: ${{ env.PROFILE_FILE }}"
        shell: pwsh
        
      - name: üîç Validate Version in Profile
        run: |
          $profileContent = Get-Content "${{ env.PROFILE_FILE }}" -Raw
          $expectedVersion = "${{ steps.get_version.outputs.version }}"
          
          # Check if version is defined in profile
          if ($profileContent -notmatch '\$script:POWERFLOW_VERSION = "([^"]+)"') {
            Write-Error "‚ùå POWERFLOW_VERSION not found in profile"
            exit 1
          }
          
          $profileVersion = $matches[1]
          Write-Host "üì¶ Profile version: $profileVersion"
          Write-Host "üè∑Ô∏è Tag version: $expectedVersion"
          
          if ($profileVersion -ne $expectedVersion) {
            Write-Error "‚ùå Version mismatch! Profile: $profileVersion, Tag: $expectedVersion"
            Write-Host "üí° Update POWERFLOW_VERSION in profile to match tag"
            exit 1
          }
          
          Write-Host "‚úÖ Version validation passed"
        shell: pwsh
        
      - name: üß™ Test Profile Syntax
        run: |
          try {
            # Test PowerShell syntax without executing
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "${{ env.PROFILE_FILE }}" -Raw), [ref]$null)
            Write-Host "‚úÖ Profile syntax validation passed"
          } catch {
            Write-Error "‚ùå Profile syntax error: $($_.Exception.Message)"
            exit 1
          }
        shell: pwsh

  create-release-files:
    name: üì¶ Create Release Files
    runs-on: windows-latest
    needs: validate
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üìù Generate Install Script
        run: |
          $version = "${{ needs.validate.outputs.version }}"
          $tagName = "${{ needs.validate.outputs.tag_name }}"
          
          $installScript = @"
          #Requires -Version 5.1
          
          <#
          .SYNOPSIS
              PowerFlow Installation Script v$version
          .DESCRIPTION
              Installs PowerFlow PowerShell profile with all dependencies
          .PARAMETER Force
              Overwrite existing profile without confirmation
          .EXAMPLE
              .\install.ps1
              .\install.ps1 -Force
          #>
          
          param([switch]`$Force)
          
          `$ErrorActionPreference = "Stop"
          
          Write-Host "üöÄ PowerFlow v$version Installation" -ForegroundColor Cyan
          Write-Host "=================================================" -ForegroundColor Cyan
          
          # Check PowerShell version
          if (`$PSVersionTable.PSVersion.Major -lt 5) {
              Write-Host "‚ùå PowerShell 5.1 or higher required" -ForegroundColor Red
              Write-Host "üí° Download PowerShell 7: https://aka.ms/powershell" -ForegroundColor Yellow
              exit 1
          }
          
          # Get profile path
          `$profilePath = `$PROFILE
          `$profileDir = Split-Path `$profilePath -Parent
          
          Write-Host "üìÅ Profile location: `$profilePath" -ForegroundColor White
          
          # Check if profile exists
          if ((Test-Path `$profilePath) -and -not `$Force) {
              Write-Host "‚ö†Ô∏è  PowerShell profile already exists!" -ForegroundColor Yellow
              `$choice = Read-Host "Overwrite existing profile? (y/n)"
              if (`$choice -ne 'y') {
                  Write-Host "‚ùå Installation cancelled" -ForegroundColor Red
                  exit 1
              }
              
              # Create backup
              `$backupPath = "`$profilePath.backup.`$(Get-Date -Format 'yyyyMMdd-HHmmss')"
              Copy-Item `$profilePath `$backupPath
              Write-Host "üíæ Backup created: `$backupPath" -ForegroundColor Cyan
          }
          
          # Create profile directory if needed
          if (-not (Test-Path `$profileDir)) {
              Write-Host "üìÇ Creating profile directory..." -ForegroundColor Yellow
              New-Item -ItemType Directory -Path `$profileDir -Force | Out-Null
          }
          
          # Download latest profile
          try {
              Write-Host "‚¨áÔ∏è  Downloading PowerFlow profile..." -ForegroundColor Yellow
              `$downloadUrl = "https://github.com/Syntax-Read3r/powerflow/releases/download/$tagName/Microsoft.PowerShell_profile.ps1"
              
              # Try release asset first, fallback to raw GitHub
              try {
                  Invoke-RestMethod -Uri `$downloadUrl -OutFile `$profilePath -ErrorAction Stop
              } catch {
                  Write-Host "   üì° Trying alternative download..." -ForegroundColor DarkGray
                  `$fallbackUrl = "https://raw.githubusercontent.com/Syntax-Read3r/powerflow/$tagName/Microsoft.PowerShell_profile.ps1"
                  Invoke-RestMethod -Uri `$fallbackUrl -OutFile `$profilePath -ErrorAction Stop
              }
              
              Write-Host "‚úÖ Profile downloaded successfully" -ForegroundColor Green
          } catch {
              Write-Host "‚ùå Failed to download profile: `$(`$_.Exception.Message)" -ForegroundColor Red
              Write-Host "üí° Manual download: https://github.com/Syntax-Read3r/powerflow/releases" -ForegroundColor Yellow
              exit 1
          }
          
          Write-Host ""
          Write-Host "üéâ PowerFlow v$version installed successfully!" -ForegroundColor Green
          Write-Host "üîÑ Restart PowerShell or run: . ```$PROFILE" -ForegroundColor Cyan
          Write-Host "üí° Type 'pwsh-h' for help after restart" -ForegroundColor Yellow
          Write-Host "üåü Repository: https://github.com/Syntax-Read3r/powerflow" -ForegroundColor DarkGray
          "@
          
          Set-Content "install.ps1" $installScript -Encoding UTF8
          Write-Host "‚úÖ Generated install.ps1"
        shell: pwsh
        
      - name: üìù Generate Uninstall Script
        run: |
          $version = "${{ needs.validate.outputs.version }}"
          
          $uninstallScript = @"
          <#
          .SYNOPSIS
              PowerFlow Uninstallation Script v$version
          .DESCRIPTION
              Removes PowerFlow profile and optionally cleans up dependencies
          #>
          
          Write-Host "üóëÔ∏è  PowerFlow v$version Uninstall" -ForegroundColor Yellow
          Write-Host "=============================================" -ForegroundColor Yellow
          
          `$profilePath = `$PROFILE
          
          if (-not (Test-Path `$profilePath)) {
              Write-Host "‚ÑπÔ∏è  No PowerShell profile found at: `$profilePath" -ForegroundColor Yellow
              exit 0
          }
          
          # Check if it's PowerFlow profile
          `$content = Get-Content `$profilePath -Raw -ErrorAction SilentlyContinue
          if (`$content -and `$content -notmatch "PowerFlow") {
              Write-Host "‚ÑπÔ∏è  Profile doesn't appear to be PowerFlow" -ForegroundColor Yellow
              `$continue = Read-Host "Remove anyway? (y/n)"
              if (`$continue -ne 'y') {
                  Write-Host "‚ùå Uninstall cancelled" -ForegroundColor Yellow
                  exit 0
              }
          }
          
          # Backup before removal
          `$backupPath = "`$profilePath.backup.`$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          Write-Host "üíæ Creating backup: `$backupPath" -ForegroundColor Cyan
          Copy-Item `$profilePath `$backupPath -ErrorAction SilentlyContinue
          
          # Remove profile
          Remove-Item `$profilePath -Force
          Write-Host "‚úÖ PowerFlow profile removed" -ForegroundColor Green
          Write-Host "üíæ Backup saved to: `$backupPath" -ForegroundColor Cyan
          
          # Ask about dependencies
          Write-Host "`nüîß Remove installed dependencies?" -ForegroundColor Yellow
          Write-Host "   ‚Ä¢ Starship prompt" -ForegroundColor DarkGray
          Write-Host "   ‚Ä¢ fzf, zoxide, lsd" -ForegroundColor DarkGray
          Write-Host "   ‚Ä¢ FiraCode Nerd Font" -ForegroundColor DarkGray
          
          `$removeDeps = Read-Host "Remove dependencies via Scoop? (y/n)"
          if (`$removeDeps -eq 'y') {
              if (Get-Command scoop -ErrorAction SilentlyContinue) {
                  Write-Host "üßπ Removing Scoop packages..." -ForegroundColor Yellow
                  scoop uninstall starship fzf zoxide lsd FiraCode-NF 2>`$null
                  Write-Host "‚úÖ Dependencies removed" -ForegroundColor Green
              } else {
                  Write-Host "‚ö†Ô∏è  Scoop not found - manual dependency removal required" -ForegroundColor Yellow
              }
          }
          
          Write-Host "`n‚úÖ PowerFlow uninstall complete" -ForegroundColor Green
          Write-Host "üôè Thanks for trying PowerFlow!" -ForegroundColor Cyan
          "@
          
          Set-Content "uninstall.ps1" $uninstallScript -Encoding UTF8
          Write-Host "‚úÖ Generated uninstall.ps1"
        shell: pwsh
        
      - name: üìù Generate Release Notes
        id: release_notes
        run: |
          $tagName = "${{ needs.validate.outputs.tag_name }}"
          $version = "${{ needs.validate.outputs.version }}"
          
          # Try to extract release notes from CHANGELOG.md
          $releaseNotes = ""
          if (Test-Path "CHANGELOG.md") {
              $changelog = Get-Content "CHANGELOG.md" -Raw
              
              # Extract content between current version and next version/unreleased
              $pattern = "(?s)## \[$version\].*?(?=## \[|\z)"
              if ($changelog -match $pattern) {
                  $releaseNotes = $matches[0] -replace "## \[$version\][^\r\n]*[\r\n]*", ""
                  $releaseNotes = $releaseNotes.Trim()
              }
          }
          
          # Fallback release notes
          if (-not $releaseNotes) {
              $releaseNotes = @"
          ## PowerFlow $version
          
          üöÄ Enhanced PowerShell profile with beautiful interfaces and productivity tools.
          
          ### üéØ Key Features
          - Smart navigation with bookmarks and fuzzy search
          - Enhanced Git workflows with beautiful interfaces
          - Auto-installation of dependencies (Starship, fzf, zoxide, lsd)
          - FiraCode Nerd Font integration
          - GitHub repository integration
          - Comprehensive help system and auto-updates
          
          ### üì¶ Installation
          ``````powershell
          # Quick install
          irm https://github.com/Syntax-Read3r/powerflow/releases/download/$tagName/install.ps1 | iex
          
          # Or download and run
          Invoke-RestMethod -Uri "https://github.com/Syntax-Read3r/powerflow/releases/download/$tagName/install.ps1" -OutFile "install.ps1"
          .\install.ps1
          ``````
          
          ### üìö Documentation
          - [Installation Guide](https://github.com/Syntax-Read3r/powerflow/blob/main/docs/installation.md)
          - [Troubleshooting](https://github.com/Syntax-Read3r/powerflow/blob/main/docs/troubleshooting.md)
          - [Features Guide](https://github.com/Syntax-Read3r/powerflow/blob/main/docs/features.md)
          
          ---
          
          **üéâ New to PowerFlow?** Type ``pwsh-h`` after installation for help!
          "@
          }
          
          # Save release notes to file
          Set-Content "RELEASE_NOTES.md" $releaseNotes -Encoding UTF8
          Write-Host "‚úÖ Generated release notes"
        shell: pwsh
        
      - name: üì§ Upload Artifacts
        uses: actions/upload-artifact@v4  # ‚úÖ FIX: Updated to v4
        with:
          name: release-files
          path: |
            ${{ env.PROFILE_FILE }}
            install.ps1
            uninstall.ps1
            RELEASE_NOTES.md

  create-github-release:
    name: üöÄ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, create-release-files]
    permissions:
      contents: write
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üì• Download Release Files
        uses: actions/download-artifact@v4  # ‚úÖ FIX: Updated to v4
        with:
          name: release-files
          path: ./release-files
          
      # ‚úÖ FIX: Modern release action instead of deprecated ones
      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag_name }}
          name: "PowerFlow ${{ needs.validate.outputs.tag_name }}"
          body_path: ./release-files/RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            ./release-files/${{ env.PROFILE_FILE }}
            ./release-files/install.ps1
            ./release-files/uninstall.ps1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: üì¢ Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, create-github-release]
    if: success()
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        
      - name: üéâ Release Success Notification
        run: |
          echo "üéâ PowerFlow ${{ needs.validate.outputs.tag_name }} released successfully!"
          echo "üì¶ Release URL: https://github.com/Syntax-Read3r/powerflow/releases/tag/${{ needs.validate.outputs.tag_name }}"
          echo "üì• Install command: irm https://github.com/Syntax-Read3r/powerflow/releases/download/${{ needs.validate.outputs.tag_name }}/install.ps1 | iex"